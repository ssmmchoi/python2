# -*- coding: utf-8 -*-
"""
1. 축(axis) : 행축, 열축
2. 행렬곱 연산(dot) : np.dot()
   사용) 회귀분석 연산과정(회귀방정식) 행렬곱 예 = [X * a] + b, 단, X, a는 행렬
    X1, X2 -> a1, a2
    model = [X1 * a1 + X2 * a2] + b  대괄호부분을 np.dot()으로 대체할 수 있음
    model = np.dot(X, a), 단, X = X1, X2 묶음, a = a1, a2 묶음
    
    - 신경망에서 행렬곱 예
        [X * w] + b, 단, w=가중치
"""


import numpy as np

# 1. 축(axis) : 행축, 열축
"""
행 축 : 동일한 열의 모음(axis = 0) -> 열 단위
열 축: 동일한 행의 모음(axis = 1) -> 행 단위
"""

arr2d = np.random.randn(5,4)
arr2d
"""
array([[-0.74423472,  1.29242793,  0.85045015, -0.42496   ],
       [-1.87478817,  0.72285578,  0.98332633,  0.40931062],
       [ 0.14315735,  0.55665818, -0.59870294,  0.65953304],
       [-1.32196035, -0.80098339, -1.19800997, -0.66717966],
       [ 0.26874341, -0.77154997,  0.87581578, -1.87337056]])
"""
print("전체 원소 합계 :", arr2d.sum())  # 전체 원소 합계 : -3.5134611706567833
print("행 단위 합계 :", arr2d.sum(axis=1))  # 행 단위 합계 : [ 0.97368336  0.24070455  0.76064563 -3.98813337 -1.50036134]
print("열 단위 합계 :", arr2d.sum(axis=0))  # 열 단위 합계 : [-3.52908248  0.99940853  0.91287935 -1.89666657]

# 2. 행렬곱 연산 : np.dot()
X = np.array([[2,3], [2.5,3]])
X  # 입력 X
"""
array([[2. , 3. ],
       [2.5, 3. ]])
"""
X.shape  # (2, 2)

a = np.array([[0.1], [0.05]])  # (2,1)  x의 열의 개수와 a의 행의 개수가 동일해야함
a.shape  # (2, 1)
a  # 기울기
"""
array([[0.1 ],
       [0.05]])
"""

# X1 * a1, X2 * a2

b= 0.1  # 절편
y_pred = np.dot(X,a) #+ b
'''
np.dat(X,a) 사용시 전제조건
1. X,a a : 모두 행렬
2. 수일치 : X의 열 차수 = a 행 차수
'''
y_pred
"""
array([[0.35],  = 2 x 0.1 + 3 x 0.05
       [0.4 ]])  = 2.5 x 0.1 + 3 x 0.05
"""



# [실습 p. 60]
X = np.array([[0.1,0.2], [0.3,0.4]])
X.shape  # (2,2)
X
"""
        X1    X2
array([[0.1, 0.2],
       [0.3, 0.4]])
"""
w = np.array([[1,2,3], [2,3,4]])
w
w.shape  # (2, 3)

# 행렬곱
h = np.dot(X, w)
h
h.shape  # (2,3) = X(2,2) * w(2,3) 즉 X의 행, w의 열수

































